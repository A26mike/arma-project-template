{
  "name": "Arma Modification project template",
  "tagline": "Addon Project template for Arma3 modifications using ACE3",
  "body": "# Arma3 AddOn Project template\r\n\r\nA project template for Arma3 AddOn projects using the ACE3 framework. This template is based off the ACE3 project structure.\r\n\r\n### Development Environment\r\n\r\nSee the [ACE3 documentation](http://ace3mod.com/wiki/development/setting-up-the-development-environment.html) on setting up your development environment\r\n\r\n### Usage\r\n\r\nSearch and replace all mentions of the following:\r\n```\r\nproj_templ by {your_prefix}\r\n```\r\n\r\n```\r\nPROJ_TEMPL by {PROJ_TEMPL}\r\n```\r\nNote that both lower and upper case are necessary. Once done, replace the logo (`logo_proj_templ_ca.paa`) by your own. Keep the same aspect ratio and file extension (`.paa`). This is important for good results in game. Also remember to rename the logo file to `logo_{your_prefix}_ca.paa`.\r\n\r\n##### Example:\r\n\r\n```\r\nproj_templ by acex\r\n```\r\n\r\n```\r\nPROJ_TEMPL by ACEX\r\n```\r\n\r\n### Using CI\r\n\r\nThis template comes with some basic scripts to validate and enforce parts of the ACE3 coding guidelines. You can find those scripts in the tools directory.\r\n\r\n- sqf_validator.py - checks all .sqf files in the addons directory and checks for missing brackets, missing semi-colons and tab usage.\r\n- config_style_checker.py - checks all .hpp and .cpp files in the addons directory and checks for missing brackets and tabs.\r\n\r\nFor more information on the guidelines, see ACE3 coding guidelines.\r\n\r\nYou can use these scripts in combination with CI - if you are on GitHub and use Travis-CI, here is an example:\r\n\r\n```yml\r\nlanguage: python\r\npython:\r\n- '3.4'\r\nscript:\r\n- python3 tools/sqf_validator.py\r\n- python3 tools/config_style_checker.py\r\n```\r\n\r\n### Adding new components\r\n\r\nAdding a new component to your project is done by copying the example component directory and renaming it. Follow these steps:\r\n\r\n- Copy the blank example component directory into the addons directory\r\n- Rename the component directory name (blank -> {your component name})\r\n- Do a search and replace of `blank` by `your component name`. Take care to preserve case sensitivity.\r\n- Ensure that the required AddOns in the `config.cpp` file inside your new component are set correctly. You will need at least a requirement to the main component of your project. Any other modifications that your component depends on will also need to be listed here, including your own components that you depend upon.\r\n- Start work on your component.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}